using System;

namespace LeetCode_0002
{

    //定义一个节点类
    public class ListNode
    {
        //节点的值
        public int val;
        //下一个节点
        public ListNode next;
        //对节点赋值
        public ListNode(int x) { val = x; }
    }
    
    public class Solution
    {
        //两数相加
        public ListNode AddTwoNumbers(ListNode l1, ListNode l2)
        {
            int val = 0;                      //val为进位
            ListNode prenode = new ListNode(0);                                          //定义一个头结点prenode的链表，节点里值为0
            ListNode lastnode = prenode;                                                 //lastnode为该链表的尾节点，等下要往后移
            while (l1 != null || l2 != null || val != 0)                                 //只要有一个不为空，或有进位
            {
                val = val + (l1 == null ? 0 : l1.val) + (l2 == null ? 0 : l2.val);       //三数相加，注意：若为空则补零
                lastnode.next = new ListNode(val % 10);                                  //先在lastnode后新建一个节点存放val%10
                lastnode = lastnode.next;                                                //再将lastnode往后移
                val = val / 10;                                                          //计算进位
                l1 = l1 == null ? null : l1.next;                                        //若l1不为空将l1往后移
                l2 = l2 == null ? null : l2.next;
            }
            return prenode.next;                                                         //返回pernode的下一个节点指针
        }
    }
    //测试代码
    class Test
    {
        //向链表赋值
        static ListNode generateList(int[] vals)
        {
            ListNode res = null;
            ListNode last = null;
            foreach (var val in vals)               //var为不一定的类型
            {
                if (res is null)
                {
                    res = new ListNode(val);
                    last = res;
                }
                else
                {
                    last.next = new ListNode(val);
                    last = last.next;
                }
            }
            return res;
        }
        //输出链表每一个节点值
        static void printList(ListNode l)
        {
            while (l != null)
            {
                Console.Write($"{l.val}, ");
                l = l.next;
            }
            Console.WriteLine("");
        }

        static void Main()
        {
            var l1 = generateList(new int[] { 1, 5, 7 });
            var l2 = generateList(new int[] { 9, 8, 2, 9 });
            printList(l1);
            printList(l2);
            Solution s = new Solution();                      //要先实例化Solution类才能调用AddTwoNumbers函数
            var sum = s.AddTwoNumbers(l1, l2);
            printList(sum);
        }
    }
}
